/****************************************************************************
*
* This is a part of the "ROOT extension to Asymptote" project.
* Authors: 
*	Jan KaÅ¡par (jan.kaspar@gmail.com) 
*
****************************************************************************/

/* Autogenerated routines are specified like this (separated by a formfeed):
   type asyname:cname(cparams)
   {
   C code
   }

	Use Void f() instead of void f() to force an explicit Stack argument.
*/



RootObject* => primRootObject()
stringarray* => stringArray()

#include "callable.h"

#ifdef HAVE_ROOT
#include "root.h"
#endif

typedef array stringarray;
using types::stringArray;

using namespace vm;


RootObject* :nullRootObject()
{
	return new RootObject();
}

RootObject* :RootObject_Copy_helper(RootObject *o)
{
	return o->Copy();
}

callable* :RootObject_Copy(RootObject *o)
{
	return new thunk(new bfunc(RootObject_Copy_helper), o);
}

RootObject *RootGetObject(string file, string name, bool error=true, bool search=true)
{
	//printf("ASY_FILE:%s\n", file.c_str());
	return RootObject::GetFromFile(file, name, error, search);
}

bool RootObjectValid:RootObjectValid(RootObject *o)
{
	return o->IsValid();
}

void :RootObject_Print_helper(RootObject *o)
{
	o->Print();
}

callable* :RootObject_Print(RootObject *o)
{
	return new thunk(new bfunc(RootObject_Print_helper), o);
}

void write(RootObject *o)
{
	o->Write();
}

void write(string str, RootObject *o)
{
	printf("%s", str.c_str());
	o->Write();
}

bool :RootObject_InheritsFrom_helper(string className, RootObject *o)
{
	return o->InheritsFrom(className);
}

callable* :RootObject_InheritsFrom(RootObject *o)
{
	return new thunk(new bfunc(RootObject_InheritsFrom_helper), o);
}

stringarray *RootGetListOfDirectories(string file, string baseDir)
{
	return RootObject::GetListOf(file, baseDir, true, false);
}

stringarray *RootGetListOfObjects(string file, string baseDir)
{
	return RootObject::GetListOf(file, baseDir, false, true);
}

stringarray *RootGetListOfEntries(string file, string baseDir)
{
	return RootObject::GetListOf(file, baseDir, true, true);
}

double :RootObject_rArrayExec_helper(string method, Int index, RootObject *o)
{
	return o->rArrayExec(method, index);
}

callable* :RootObject_rArrayExec(RootObject *o)
{
	return new thunk(new bfunc(RootObject_rArrayExec_helper), o);
}

// vim: ft=cpp
